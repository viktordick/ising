#!/usr/bin/env python3

from sys import argv,exit
from math import log,exp

if (len(argv) != 4):
    print(argv[0],"pmin pmax maxbits")
    exit()

pmin = max(0,float(argv[1]))
pmax = min(1,float(argv[2]))
maxbits = int(argv[3])

# pmin = 1-exp(-4*betamin)
# pmax = 1-exp(-4*betamax)

class bitfield:
    def __init__(self):
        self.p = 0
        self.bits = []
        self.lsb = 1 #value of least significant bit
    def append(self,border):
        """add another bit such that the value is still below border"""
        self.lsb /= 2.0
        if self.p + self.lsb < border:
            val = 1
            self.p += self.lsb
        else:
            val = 0
        self.bits = [val] + self.bits
    def inc(self):
        self.p += 2**(-len(self.bits))
        for i in range(len(self.bits)):
            if self.bits[i] == 0:
                self.bits[i] = 1
                break
            else:
                self.bits[i] = 0
    def __repr__(self):
        s = ''
#         val = 0
        for i in self.bits:
            if s=='' and i==0:
                continue
            s = str(i)+s
#             val /= 2
#             if i == 1:
#                 val += 0.5
        return s
#         return "{{:{}}} {{}}".format(maxbits).format(s,val)

b = bitfield()
inc = 1
for i in range(maxbits):
    b.append(pmin)

b.inc()
while b.p < pmax:
    print(b)
    b.inc()
