#!/usr/bin/env python3
'''
This script expects the output of sc/bitrange as input.

It takes a number of bit signatures and creates C++ code with one function for
each signature. This function creates a bit pattern with the corresponding
probability (i.e., where each bit has value 1 with probability p).
'''

import sys
import math

def p(sig):
    result = 0
    val = 1
    for bit in sig:
        val /= 2
        if bit == '1':
            result += val
    return result
def beta(sig):
    return -0.25*math.log(1-p(sig))

sigs = sys.stdin.read().split()
for sig in sigs:
    print("""struct Random_{} {{
    static Random::result_type get(Random &r) {{
        Random::result_type result = r();""".format(sig))
    for bit in reversed(sig[:-1]):
        print("        result {0}= r();".format('|' if bit=='0' else '&'))
    print("""        return result;
    }}
}};
""".format(sig,sig))

print("void run(std::string sig, Random::result_type seed, int nmeas) { ")
for sig in sigs:
    print("""
    if (sig == "{0}") 
        Ising<Random_{0}>(sig,seed, nmeas);""".format(sig))
print("}")
