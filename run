#!/usr/bin/env python3
'''
Build binaries for given lattize size and probabilities.

Takes an interval of floating point numbers between 0 and 1 and computes all
floating point numbers in this interval which can be represented by a given
number of bits after the decimal point within that interval.

So, if the parameters '0.0 1.0 2' are given, the numbers 1/4, 1/2 and 3/4 are
computed, which in binary are 0.01, 0.1 and 0.11. Zero is always excluded.
'''
from math import ceil
import os
import sys
import signal
import subprocess as sp
import asyncio
import logging

terminating = False

if (len(sys.argv) != 6):
    print(sys.argv[0], "N pmin pmax maxbits nmeas")
    sys.exit()

N = int(sys.argv[1])
L = 256*N
maxbits = int(sys.argv[4])
scaling = 2**maxbits
pmin = max(1, ceil(float(sys.argv[2])*2**maxbits))
pmax = min(2**maxbits - 1, ceil(float(sys.argv[3])*2**maxbits))
nmeas = int(sys.argv[5])

fmt = '{:0' + str(maxbits) + 'b}'
code = """
use crate::rnd::{{SmallRng,rng}};

pub const N: usize = {};
pub const SIG: &str = "{}";

pub fn rand_p(r: &mut SmallRng) -> u128 {{
    let mut res = rng(r);
{}
    res
}}
"""

for f in ['.state', 'result', 'data', 'bin']:
    os.makedirs(f'{f}/{L}', exist_ok=True)

procs = []


async def worker(queue):
    while True:
        p = await queue.get()
        queue.task_done()
        if p is None:
            return
        if terminating:
            continue
        try:
            print(p/scaling)
            sig = fmt.format(p).rstrip('0')
            lines = []
            for char in sig[-2::-1]:
                op = '|' if char == '1' else '&'
                lines.append(f'    res {op}= rng(r);')

            with open('src/generated.rs', 'w') as f:
                print(code.format(N, sig, '\n'.join(lines)), file=f)
            sp.run(['cargo', 'build', '--release'], check=True,
                   capture_output=True)
            os.rename('target/release/ising', f'bin/{L}/{sig}')
            proc = await asyncio.create_subprocess_exec(
                f'bin/{L}/{sig}',
                str(nmeas),
            )
            procs.append(proc)
            await proc.wait()
            procs.remove(proc)
            os.remove(f'bin/{L}/{sig}')
        except Exception:
            logging.exception("Terminating")
            terminate()


def terminate():
    global terminating
    print('terminating')
    terminating = True
    loop = asyncio.get_running_loop()
    for sig in [signal.SIGINT, signal.SIGTERM]:
        loop.remove_signal_handler(sig)
    for proc in procs:
        proc.terminate()


async def main():
    loop = asyncio.get_running_loop()
    queue = asyncio.Queue()
    for sig in [signal.SIGINT, signal.SIGTERM]:
        loop.add_signal_handler(sig, terminate)
    tasks = []
    for _ in range(8):
        tasks.append(asyncio.create_task(worker(queue)))

    for p in range(pmin, pmax+1):
        if terminating:
            break
        await queue.put(p)

    for task in tasks:
        await queue.put(None)

    await queue.join()
    for task in tasks:
        task.cancel()
    await asyncio.gather(*tasks, return_exceptions=True)

asyncio.run(main())
